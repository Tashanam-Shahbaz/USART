
Receiver_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000196  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000142  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000196  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001c8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000079b  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000069a  00000000  00000000  000009bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ed  00000000  00000000  00001059  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001348  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ab  00000000  00000000  0000137c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000012b  00000000  00000000  00001727  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001852  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
   8:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
   c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  10:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  14:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  18:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  1c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  20:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  24:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  28:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  2c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  30:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  34:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  38:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  3c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  40:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  44:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  48:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  4c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  50:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  54:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  58:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  5c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  60:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  64:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  68:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  6c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61
  7c:	0e 94 44 00 	call	0x88	; 0x88 <main>
  80:	0c 94 9f 00 	jmp	0x13e	; 0x13e <_exit>

00000084 <__bad_interrupt>:
  84:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000088 <main>:
#define F_CPU 1000000UL
#include<util/delay.h>
#include <string.h>

int main(void)
{
  88:	cf 93       	push	r28
  8a:	df 93       	push	r29
  8c:	00 d0       	rcall	.+0      	; 0x8e <main+0x6>
  8e:	00 d0       	rcall	.+0      	; 0x90 <main+0x8>
  90:	cd b7       	in	r28, 0x3d	; 61
  92:	de b7       	in	r29, 0x3e	; 62
	   char Original_Password_Receiver[4] = {'1','2','3','4'}; //Original Password defined 
  94:	81 e3       	ldi	r24, 0x31	; 49
  96:	89 83       	std	Y+1, r24	; 0x01
  98:	82 e3       	ldi	r24, 0x32	; 50
  9a:	8a 83       	std	Y+2, r24	; 0x02
  9c:	83 e3       	ldi	r24, 0x33	; 51
  9e:	8b 83       	std	Y+3, r24	; 0x03
  a0:	84 e3       	ldi	r24, 0x34	; 52
  a2:	8c 83       	std	Y+4, r24	; 0x04
		int index=0;
		
		DDRB&=~(1<<PB2); // for bridging
  a4:	87 b3       	in	r24, 0x17	; 23
  a6:	8b 7f       	andi	r24, 0xFB	; 251
  a8:	87 bb       	out	0x17, r24	; 23
		DDRB|=(1<<PB3); //  for bridging
  aa:	87 b3       	in	r24, 0x17	; 23
  ac:	88 60       	ori	r24, 0x08	; 8
  ae:	87 bb       	out	0x17, r24	; 23
		DDRA = 0xFF; // declaring as input
  b0:	8f ef       	ldi	r24, 0xFF	; 255
  b2:	8a bb       	out	0x1a, r24	; 26
		DDRC=0xFF;
  b4:	84 bb       	out	0x14, r24	; 20
		
		//Setting Baud Rate
		UBRR1H=0x00;
  b6:	1c be       	out	0x3c, r1	; 60
		UBRR1L=0x05;
  b8:	85 e0       	ldi	r24, 0x05	; 5
  ba:	80 b9       	out	0x00, r24	; 0
		
		//Enabling Receiver.
		UCSR1B=(1<<RXEN1);
  bc:	80 e1       	ldi	r24, 0x10	; 16
  be:	81 b9       	out	0x01, r24	; 1
		
		//Setting Frame Format.
		UCSR1C = (1<<URSEL1)|(3<<UCSZ10)|(1<<USBS1);
  c0:	8e e8       	ldi	r24, 0x8E	; 142
  c2:	8c bf       	out	0x3c, r24	; 60
		
		
		unsigned char digit;
		
		//Making Fast DC MOTOR initially stop.
		PORTA=0b00111111;
  c4:	8f e3       	ldi	r24, 0x3F	; 63
  c6:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c8:	2f e3       	ldi	r18, 0x3F	; 63
  ca:	3d e0       	ldi	r19, 0x0D	; 13
  cc:	43 e0       	ldi	r20, 0x03	; 3
  ce:	21 50       	subi	r18, 0x01	; 1
  d0:	30 40       	sbci	r19, 0x00	; 0
  d2:	40 40       	sbci	r20, 0x00	; 0
  d4:	e1 f7       	brne	.-8      	; 0xce <main+0x46>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <main+0x50>
  d8:	00 00       	nop
#include <string.h>

int main(void)
{
	   char Original_Password_Receiver[4] = {'1','2','3','4'}; //Original Password defined 
		int index=0;
  da:	80 e0       	ldi	r24, 0x00	; 0
  dc:	90 e0       	ldi	r25, 0x00	; 0
    while (1) 
    {
		//getting data from Transmitter	
		
		//UCSR1A store speed of transmission of bit. For me.
		while(!(UCSR1A&(1<<RXC1)));
  de:	17 9b       	sbis	0x02, 7	; 2
  e0:	fe cf       	rjmp	.-4      	; 0xde <main+0x56>

		digit=UDR1;
  e2:	23 b1       	in	r18, 0x03	; 3
		
		if(digit=='*'){
  e4:	2a 32       	cpi	r18, 0x2A	; 42
  e6:	59 f4       	brne	.+22     	; 0xfe <main+0x76>
		PORTA=0b00000101;
  e8:	35 e0       	ldi	r19, 0x05	; 5
  ea:	3b bb       	out	0x1b, r19	; 27
  ec:	5f e3       	ldi	r21, 0x3F	; 63
  ee:	3d e0       	ldi	r19, 0x0D	; 13
  f0:	43 e0       	ldi	r20, 0x03	; 3
  f2:	51 50       	subi	r21, 0x01	; 1
  f4:	30 40       	sbci	r19, 0x00	; 0
  f6:	40 40       	sbci	r20, 0x00	; 0
  f8:	e1 f7       	brne	.-8      	; 0xf2 <main+0x6a>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <main+0x74>
  fc:	00 00       	nop
		_delay_ms(1000);
		
		}
		
		
		if(digit==Original_Password_Receiver[index]){
  fe:	e1 e0       	ldi	r30, 0x01	; 1
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	ec 0f       	add	r30, r28
 104:	fd 1f       	adc	r31, r29
 106:	e8 0f       	add	r30, r24
 108:	f9 1f       	adc	r31, r25
 10a:	30 81       	ld	r19, Z
 10c:	23 13       	cpse	r18, r19
 10e:	01 c0       	rjmp	.+2      	; 0x112 <main+0x8a>
		index++;
 110:	01 96       	adiw	r24, 0x01	; 1
		}
		
		if (index==4)
 112:	84 30       	cpi	r24, 0x04	; 4
 114:	91 05       	cpc	r25, r1
 116:	69 f4       	brne	.+26     	; 0x132 <main+0xaa>
		{
			PORTA=0b00000110; // Fast DC Motor rotate 	
 118:	86 e0       	ldi	r24, 0x06	; 6
 11a:	8b bb       	out	0x1b, r24	; 27
 11c:	5f e3       	ldi	r21, 0x3F	; 63
 11e:	8d e0       	ldi	r24, 0x0D	; 13
 120:	93 e0       	ldi	r25, 0x03	; 3
 122:	51 50       	subi	r21, 0x01	; 1
 124:	80 40       	sbci	r24, 0x00	; 0
 126:	90 40       	sbci	r25, 0x00	; 0
 128:	e1 f7       	brne	.-8      	; 0x122 <main+0x9a>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <main+0xa4>
 12c:	00 00       	nop
			_delay_ms(1000);
			index=0;
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	90 e0       	ldi	r25, 0x00	; 0
			
		}
		if(index!=4)
 132:	84 30       	cpi	r24, 0x04	; 4
 134:	91 05       	cpc	r25, r1
 136:	99 f2       	breq	.-90     	; 0xde <main+0x56>
		{
			PORTA=0b00000111;  // Fast DC Motor Stop
 138:	27 e0       	ldi	r18, 0x07	; 7
 13a:	2b bb       	out	0x1b, r18	; 27
 13c:	d0 cf       	rjmp	.-96     	; 0xde <main+0x56>

0000013e <_exit>:
 13e:	f8 94       	cli

00000140 <__stop_program>:
 140:	ff cf       	rjmp	.-2      	; 0x140 <__stop_program>
